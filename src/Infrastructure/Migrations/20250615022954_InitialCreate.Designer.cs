// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250615022954_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Core.Domain.Entities.Astrology.Astrologer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Astrologers");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.AstrologerSetting", b =>
                {
                    b.Property<Guid>("AstrologerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("DeduplicateAspect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultBgImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseSystem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SectionOrderRule")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AstrologerId");

                    b.ToTable("AstrologerSettings");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.BirthInfo", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("BirthTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Lat")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Lon")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("BirthInfos");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.ChartAspect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AspectType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BodyA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BodyB")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChartDataId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Orb")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChartAspects");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.ChartData", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseCusps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlanetPositions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("ChartData");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.ChartHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChartDataId")
                        .HasColumnType("TEXT");

                    b.Property<int>("HouseNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChartHouses");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.ChartImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BlobUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChartDataId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Dpi")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HeightPx")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("WidthPx")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChartImages");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AstrologerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.Interpretation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AstrologerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConditionKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConditionKey");

                    b.ToTable("Interpretations");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.ReportSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Heading")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectionKind")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowHeading")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReportId", "SortOrder");

                    b.ToTable("ReportSections");
                });

            modelBuilder.Entity("Core.Domain.Entities.Astrology.SyncJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AstrologerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMsg")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SyncJobs");
                });

            modelBuilder.Entity("Core.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
